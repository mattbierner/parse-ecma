/**
 * @fileOverview Position for parsing.
 */
package ParserPosition
with
    import 'bennu::parse' {Position},
    
    import 'nu-stream::stream' {isEmpty first},
    
    import 'ecma-ast::position' {SourcePosition}
in {

/**
 * Parsing position.
 * 
 * @member tokenPosition Index of the current token.
 * @member sourcePosition Source position of the current token.
 * @member prevEnd Previous token's end position.
 */
ParserPosition := function \tokenPosition sourcePosition prevEnd =self-> {
    self.tokenPosition := tokenPosition;
    self.sourcePosition := sourcePosition;
    self.prevEnd := prevEnd;
};

ParserPosition.initial = new ParserPosition(
    Position.initial,
    SourcePosition.initial,
    Position.initial);

ParserPosition.prototype.increment = \tok r =self->
    new ParserPosition(
        self.tokenPosition.increment(tok),
        ?isEmpty r
            :tok.loc.end
            :first(r).loc.start,
        tok.loc.end);

ParserPosition.prototype.toString = \ =self->
    '' + self.sourcePosition;

ParserPosition.prototype.compare = \pos =self->
    self.tokenPosition.compare(pos.tokenPosition);

}