/**
 * Parser for ECMAScript 5.1 expressions.
 */
package (
    arrayElement
    arrayElements
    arrayLiteral
    
// Object Literal
    propertyName
    propertySetParameterList
    propertyValueInitializer
    propertyGetInitializer
    propertySetInitializer
    propertyInitializer
    propertyList
    objectLiteral
    
// Primary Expression
    primaryExpression
    
// This Expression
    thisExpression
    
// Call Expression
    args
    argumentList
    
// Member Expression
    dotAccessor
    bracketAccessor
    accessor
    memberExpression
    
// New Expression
    newExpression
    
// Left hand side expression
    leftHandSideExpression
    
// Postfix Expression
    postfixOperator
    postfixExpression
    
// Unary Expression
    unaryOperator
    unaryExpression
    
// Binary Expression
    binaryExpression
    binaryExpressionNoIn
    
// Conditional Expression
    conditionalExpression
    conditionalExpressionNoIn
    
// Assignment Expression
    assignmentOperator
    assignmentExpression
    assignmentExpressionNoIn
    
// Expression
    expression
    expressionNoIn)
with
    import 'bennu::parse' parse#{
        choice
        either
        late
        optional
        eager},
    import 'bennu::lang' {
        between
        sepBy
        sepBy1
        sepEndBy
        then},
    
    import 'nu-stream::stream' stream,
    
    import 'ecma-ast::expression' ast_expression,
    import 'ecma-ast::position' position,
    import 'ecma-ast::value' ast_value,
    
    import './program_parser' program,
    import './token_parser' token#{
        keyword
        punctuator},
    import './value_parser' value,
    import './common' {node nodea precedence}
in {

var extend = \obj props ->
    Object.defineProperties(
        Object.getOwnPropertyNames(obj).reduce(\p, key -> {
            return Object.defineProperty(p, key, Object.getOwnPropertyDescriptor(obj, key));
        }, {}),
        Object.keys(props).reduce(\p c -> {
            p.(c) = {
                'value': props.(c),
                'enumerable': true
            };
            return p;
        }, {}));

/* Circular
 ******************************************************************************/
var functionExpression = late \-> {
    with import './program_parser' {functionExpression} in {
        return functionExpression;
    }
};

var functionBody = late \-> {
    with import './program_parser' {functionBody} in {
        return functionBody;
    }
};

/* Forward Declarations
 ******************************************************************************/
assignmentExpression = late \-> { return assignmentExpression; };

assignmentExpressionNoIn = late \-> { return assignmentExpressionNoIn; };

expression = late \-> { return expression; };

newExpression = late \-> { return newExpression; };

/* Parsers
 ******************************************************************************/
// Array Literal
////////////////////////////////////////
/**
 * Parser for an element in an array literal.
 */
arrayElement = parse.label('Array Element',
    either(
        assignmentExpression,
        parse.next(
            parse.look(punctuator ','),
            parse.always(null))));

/**
 * Parser for the elements of an array literal.
 */
arrayElements = parse.label('Array Elements',
    sepEndBy(punctuator ',',
        arrayElement));

/**
 * Parser for an ECMASccript array literal.
 */
arrayLiteral = parse.label('Array Literal',
    node(
        between(punctuator '[', punctuator ']',
            eager arrayElements),
        ast_expression.ArrayExpression.create));

// Object Literal
////////////////////////////////////////
/**
 * Parser for an object property name.
 */
propertyName = parse.label('Property Name',
    parse.expected('property name', choice(
        value.identifier,
        value.stringLiteral,
        value.numericLiteral)));

/**
 * Parser for the argument list of a object set initializer property.
 */
propertySetParameterList = parse.bind(
    value.identifier,
    \x ->
        parse.always [x]);

/**
 * Parser for the key of a value initialized property .
 */
var propertyValueKey = parse.label('Property Value Key',
    then(
        propertyName,
        punctuator ':'));

/**
 * Parser for the standard key to value property initializer.
 */
propertyValueInitializer = parse.label('Property Value Initializer',
    assignmentExpression);

/**
 * Parser for the value property
 */
var valueProperty = parse.label('Value Property',
    nodea(
        parse.enumeration(
            parse.attempt(propertyValueKey),
            parse.expected('Assignment Expression', propertyValueInitializer)),
        ast_value.ObjectValue.create));

/**
 * Parser for the key of a property getter.
 */
var propertyGetterKey = parse.label('Property Getter Key',
    parse.next(
        token.identifier('get'),
        propertyName));

/**
 * Parser for a getter for a property.
 */
propertyGetInitializer = parse.label('Property Get Initializer',
    node(
        parse.next(
            parse.next(
                punctuator '(',
                punctuator ')'),
            between(punctuator '{', punctuator '}',
                functionBody)),
        \loc, body ->
            new ast_expression.FunctionExpression(loc, null, [], body)));

/**
 * Parser for a property getter.
 */
var getterProperty = parse.label('Getter Property',
    nodea(
        parse.enumeration(
            propertyGetterKey,
            propertyGetInitializer),
        ast_value.ObjectGetter.create));

/**
 * Parser for the key of a property getter.
 */
var propertySetterKey = parse.label('Property Setter Key',
    parse.next(
        token.identifier('set'),
        propertyName));

/**
 * Parser for a setter for a property.
 */
propertySetInitializer = parse.label('Property Set Initializer',
    nodea(
        parse.enumeration(
            between(punctuator '(', punctuator ')',
                propertySetParameterList),
            between(punctuator '{', punctuator '}',
                functionBody)),
        \loc, params, body ->
            new ast_expression.FunctionExpression(loc, null, params, body)));

/**
 * Parser for a property setter.
 */
var setterProperty = parse.label('Setter Property',
    nodea(
        parse.enumeration(
            propertySetterKey,
            propertySetInitializer),
        ast_value.ObjectSetter.create));

/**
 * Parser for any property initializer.
 */
propertyInitializer = parse.label('Property Initializer',
    choice(
        valueProperty,
        getterProperty,
        setterProperty));

/**
 * Parser for the body of an object literal.
 */
propertyList = parse.label('Property List',
    sepEndBy(punctuator ',',
        propertyInitializer));

/**
 * Object Literal
 */
objectLiteral = parse.label('Object Literal',
    node(
        between(punctuator '{', punctuator '}',
            eager propertyList),
        ast_expression.ObjectExpression.create));

// This Expression
////////////////////////////////////////
/**
 * This Expression
 */
thisExpression = parse.label('This Expression',
    node(
        keyword 'this',
        ast_expression.ThisExpression.create));

// Primary Expression
////////////////////////////////////////
/**
 * Primary Expression
 */
primaryExpression = parse.memo(parse.label('Primary Expression',
    choice(
        functionExpression,
        thisExpression,
        value.identifier,
        value.literal,
        arrayLiteral,
        objectLiteral,
        between(punctuator '(', punctuator ')',
            expression))));

// Calling
////////////////////////////////////////
/**
 * Parser for a list of arguments.
 */
argumentList = parse.label('Argument List',
    sepBy(punctuator ',',
        parse.expected("assignment expression", assignmentExpression)));

/**
 * Parser for a argument list part of a call expression.
 */
args = parse.label('Arguments',
    node(
        between(punctuator '(', punctuator ')',
            eager argumentList),
        \loc, args -> {
            args.loc = loc;
            return args;
        }));

// Accessors
////////////////////////////////////////
/**
 * Parser for a dot accessor in a member expression.
 */
dotAccessor = parse.label('Dot Accessor',
    node(
        parse.next(
            punctuator '.',
            value.identifier),
        \loc, x -> ({
            'loc': loc,
            'property': x,
            'computed': false
        })));

/**
 * Parser for a bracket accessor in a member expression.
 */
bracketAccessor = parse.label('Bracket Accessor',
    node(
        between(punctuator '[', punctuator ']',
            parse.expected("expression", expression)),
        \loc x -> ({
            'loc': loc,
            'property': x,
            'computed': true
        })));

/**
 * Parser for an accessor in a member expression.
 */
accessor = parse.label('Accessor',
    either(
        dotAccessor,
        bracketAccessor));

// Member Expression
////////////////////////////////////////
/**
 * Parser for a member expression.
 */
memberExpression = let
    reducer = \p, c ->
        ast_expression.MemberExpression.create(
            position.SourceLocation.merge(p.loc, c.loc),
            p,
            c.property,
            c.computed)
in
    parse.memo(parse.label('Member Expression',
        parse.binds(
            parse.enumeration(
                either(
                    newExpression,
                    primaryExpression),
                parse.many(accessor)),
            \expression, props ->
                parse.always(stream.foldl(reducer, expression, props)))));


// New Expression
////////////////////////////////////////
/**
 * Parser for a new expression
 */
newExpression = parse.memo(parse.label('New Expression',
    nodea(
        parse.next(
            keyword 'new',
            parse.enumeration(
                parse.expected("member expression", memberExpression),
                parse.optional([], args))),
        ast_expression.NewExpression.create)));

// Left Hand Side Expression
////////////////////////////////////////
/**
 * Parser for a left hand side expression.
 */
leftHandSideExpression = let
    reducer = \p, c -> let
        loc = ?c.loc : position.SourceLocation.merge(p.loc, c.loc) : p.loc
    in
        ?c.hasOwnProperty('property')
             :ast_expression.MemberExpression.create(loc, p, c.property, c.computed)
             :ast_expression.CallExpression.create(loc, p, c)
in
    parse.memo(parse.label('Left Hand Side Expression',
        parse.binds(
            parse.enumeration(
                memberExpression,
                parse.many(either(
                    args,
                    accessor))),
            \member, accessors ->
                parse.always(stream.foldl(reducer, member, accessors)))));

// Postfix Expression
////////////////////////////////////////
postfixOperator = parse.label('Postfix Operator',
    punctuator('++', '--'));

postfixExpression = parse.label('Postfix Expression',
    nodea(
        parse.enumeration(
            leftHandSideExpression,
            parse.optional(postfixOperator)),
        \loc, argument, op ->
            ?!op
                :argument
                :ast_expression.UpdateExpression.create(
                    position.SourceLocation.merge(argument.loc, op.loc),
                    op.value,
                    argument,
                    false)));

// Unary Expression
////////////////////////////////////////
unaryOperator = parse.label('Unary Operator',
    either(
        keyword(
            'delete',
            'void',
            'typeof'),
        punctuator(
            '++',
            '--',
            '+',
            '-',
            '~',
            '!')));

/**
 * Parser for a unary (prefix) expression.
 */
unaryExpression = let
    reducer = \argument, op -> let
        loc = position.SourceLocation.merge(op.loc, argument.loc)
    in
        ?op.value === '++' || op.value === '--'
            :new ast_expression.UpdateExpression(loc, op.value, argument, true)
            :new ast_expression.UnaryExpression(loc, op.value, argument)
    
in
    parse.label('Unary Expression',
        parse.binds(
            parse.enumeration(
                parse.many(unaryOperator),
                parse.expected("postfix expression", postfixExpression)),
            \ops expression ->
                parse.always(stream.foldr(reducer, expression, ops))));

// Binary Expressions
////////////////////////////////////////
var basePrecedenceTable = {
    '*': { 'type': 'punctuator', 'precedence': 1, 'node': ast_expression.BinaryExpression },
    '%': { 'type': 'punctuator', 'precedence': 1, 'node': ast_expression.BinaryExpression },
    '/': { 'type': 'punctuator', 'precedence': 1, 'node': ast_expression.BinaryExpression },
    
    '+': { 'type': 'punctuator', 'precedence': 2, 'node': ast_expression.BinaryExpression },
    '-': { 'type': 'punctuator', 'precedence': 2, 'node': ast_expression.BinaryExpression },
    
    '<<': { 'type': 'punctuator', 'precedence': 3, 'node': ast_expression.BinaryExpression },
    '>>': { 'type': 'punctuator', 'precedence': 3, 'node': ast_expression.BinaryExpression },
    '>>>': { 'type': 'punctuator', 'precedence': 3, 'node': ast_expression.BinaryExpression },
    
    '==': { 'type': 'punctuator', 'precedence': 5, 'node': ast_expression.BinaryExpression },
    '!=': { 'type': 'punctuator', 'precedence': 5, 'node': ast_expression.BinaryExpression },
    '===': { 'type': 'punctuator', 'precedence': 5, 'node': ast_expression.BinaryExpression },
    '!==': { 'type': 'punctuator', 'precedence': 5, 'node': ast_expression.BinaryExpression },

    '&': { 'type': 'punctuator', 'precedence': 6, 'node': ast_expression.BinaryExpression },

    '^': { 'type': 'punctuator', 'precedence': 7, 'node': ast_expression.BinaryExpression },

    '|': { 'type': 'punctuator', 'precedence': 8, 'node': ast_expression.BinaryExpression },

    '||': { 'type': 'punctuator', 'precedence': 9, 'node': ast_expression.LogicalExpression },
    
    '&&': { 'type': 'punctuator', 'precedence': 9, 'node': ast_expression.LogicalExpression }
};

var precedenceTable = extend(basePrecedenceTable, {
    '<': { 'type': 'punctuator', 'precedence': 4, 'node': ast_expression.BinaryExpression },
    '>': { 'type': 'punctuator', 'precedence': 4, 'node': ast_expression.BinaryExpression },
    '<=': { 'type': 'punctuator', 'precedence': 4, 'node': ast_expression.BinaryExpression },
    '>=': { 'type': 'punctuator', 'precedence': 4, 'node': ast_expression.BinaryExpression },
    'instanceof': { 'type': 'keyword', 'precedence': 4, 'node': ast_expression.BinaryExpression },
    'in':  { 'type': 'keyword', 'precedence': 4, 'node': ast_expression.BinaryExpression }
});

var precedenceTableNoIn = extend(basePrecedenceTable, {
    '<': { 'type': 'punctuator', 'precedence': 4, 'node': ast_expression.BinaryExpression },
    '>': { 'type': 'punctuator', 'precedence': 4, 'node': ast_expression.BinaryExpression },
    '<=': { 'type': 'punctuator', 'precedence': 4, 'node': ast_expression.BinaryExpression },
    '>=': { 'type': 'punctuator', 'precedence': 4, 'node': ast_expression.BinaryExpression },
    'instanceof': { 'type': 'keyword', 'precedence': 4, 'node': ast_expression.BinaryExpression }
});

binaryExpression = parse.label('Binary Expression',
    precedence(unaryExpression, precedenceTable));

binaryExpressionNoIn = parse.label('Binary Expression',
    precedence(unaryExpression, precedenceTableNoIn));

// Conditional Expression
////////////////////////////////////////
var _baseConditionalExpressionlabel = \binExpr assignExpr ->
    either(
        nodea(
            parse.enumeration(
                parse.attempt(then(
                    parse.memo binExpr,
                    punctuator '?')),
                then(
                    assignExpr,
                    punctuator ':'),
                assignExpr),
            ast_expression.ConditionalExpression.create),
        parse.memo binExpr);

/**
 * Parser for a standard conditional expression.
 */
conditionalExpression = parse.label('Conditional Expression',
    _baseConditionalExpressionlabel(binaryExpression,
        parse.expected("assignment expression", assignmentExpression)));

/**
 * Parser for a conditional expression without the in operator.
 */
conditionalExpressionNoIn = parse.label('Conditional Expression No In',
    _baseConditionalExpressionlabel(binaryExpressionNoIn,
        parse.expected("assignment expression no in", assignmentExpressionNoIn)));


// Assignment Expression
////////////////////////////////////////
/**
 * Parser for an assignment operator.
 */
assignmentOperator = parse.label('Assignment Operator',
    punctuator(
        '=',
        '*=',
        '*=',
        '/=',
        '%=',
        '+=',
        '-=',
        '<<=',
        '>>=',
        '>>>=',
        '&=',
        '^=',
        '|='));

var _baseAssignmentExpressionlabel = \condExpr ->
    parse.rec\self ->
        either(
            parse.binds(
                parse.attempt(parse.enumeration(
                    leftHandSideExpression,
                    assignmentOperator)),
                \left, operator ->
                    parse.bind(
                        parse.expected("assignment expression", self),
                        \right ->
                            parse.always(ast_expression.AssignmentExpression.create(
                                position.SourceLocation.merge(left.loc, right.loc),
                                operator.value,
                                left,
                                right)))),
            condExpr);

/**
 * Parser for a standard assignment expression.
 */
assignmentExpression = parse.label('Assignment Expression',
    _baseAssignmentExpressionlabel(conditionalExpression));

/**
 * Parser for an assignment expression without the in operator.
 */
assignmentExpressionNoIn = parse.label('Assignment Expression No In', 
    _baseAssignmentExpressionlabel(conditionalExpressionNoIn));

// Expression
////////////////////////////////////////
var _baseExpressionlabel = \expr ->
    node(
        eager sepBy1(punctuator ',', expr),
        \loc list ->
            ?list.length > 1
                :new ast_expression.SequenceExpression(loc, list)
                :list.(0));

/**
 * Parser for a standard expression.
 */
expression = parse.label('Expression',
    _baseExpressionlabel(parse.expected("expression",
        assignmentExpression)));

/**
 * Parser for an expression without the in operator.
 */
expressionNoIn = parse.label('Expression No In',
    _baseExpressionlabel(parse.expected("expression no in",
        assignmentExpressionNoIn)));

}