/**
 * @fileOverview Parser for ECMAScript 5.1 expressions.
 */
package (
    arrayElement
    arrayElements
    arrayLiteral
    
// Object Literal
    propertyName
    propertySetParameterList
    propertyValueInitializer
    propertyGetInitializer
    propertySetInitializer
    propertyInitializer
    propertyList
    objectLiteral
    
// Primary Expression
    primaryExpression
    
// This Expression
    thisExpression
    
// Call Expression
    args
    argumentList
    
// Member Expression
    dotAccessor
    bracketAccessor
    accessor
    memberExpression
    
// New Expression
    newExpression
    
// Left hand side expression
    leftHandSideExpression
    
// Postfix Expression
    postfixOperator
    postfixExpression
    
// Unary Expression
    unaryOperator
    unaryExpression
    
// Binary Expression
    binaryExpression
    binaryExpressionNoIn
    
// Conditional Expression
    conditionalExpression
    conditionalExpressionNoIn
    
// Assignment Expression
    assignmentOperator
    assignmentExpression
    assignmentExpressionNoIn
    
// Expression
    expression
    expressionNoIn)
with
    import 'bennu::parse' parse,
    import 'bennu::lang' parse_lang,
    
    import 'nu-stream::stream' stream,
    
    import 'ecma-ast::expression' ast_expression,
    import 'ecma-ast::position' position,
    import 'ecma-ast::value' ast_value,
    
    import './program_parser' program,
    import './token_parser' token,
    import './value_parser' value,
    import './common' ecma_parse
in {

var extend = \obj props ->
    Object.defineProperties(
        Object.getOwnPropertyNames(obj).reduce(\p, key -> {
            return Object.defineProperty(p, key, Object.getOwnPropertyDescriptor(obj, key));
        }, {}),
        Object.keys(props).reduce(\p c -> {
            p.(c) = {
                'value': props.(c),
                'enumerable': true
            };
            return p;
        }, {}));

/* Circular
 ******************************************************************************/
var functionExpression = \-args()-> {
    with
        import 'ecma/parse/program_parser' {functionExpression}
    in {
        return functionExpression.apply(undefined, args);
    }
};

var functionBody = \-args()-> {
    with
        import 'ecma/parse/program_parser' {functionBody}
    in {
        return functionBody.apply(undefined, args);
    }
};

/* Forward Declarations
 ******************************************************************************/
assignmentExpression = \-args()-> { return assignmentExpression.apply(undefined, args); };

assignmentExpressionNoIn = \-args()-> { return assignmentExpressionNoIn.apply(undefined, args); };

expression = \-args()-> { return expression.apply(undefined, args); };

newExpression = \-args()-> { return newExpression.apply(undefined, args); };

/* Parsers
 ******************************************************************************/
// Array Literal
////////////////////////////////////////
/**
 * Parser for an element in an array literal.
 */
arrayElement = parse.Parser('Array Element',
    parse.either(
        assignmentExpression,
        parse.next(
            parse.look(token.punctuator(',')),
            parse.always(null))));

/**
 * Parser for the elements of an array literal.
 */
arrayElements = parse.Parser('Array Elements',
    parse.eager(parse_lang.sepEndBy(token.punctuator(','),
        arrayElement)));

/**
 * Parser for an ECMASccript array literal.
 */
arrayLiteral = parse.Parser('Array Literal',
    ecma_parse.node(
        parse_lang.between(token.punctuator('['), token.punctuator(']'),
            arrayElements),
        ast_expression.ArrayExpression.create));

// Object Literal
////////////////////////////////////////
/**
 * Parser for an object property name.
 */
propertyName = parse.Parser('Property Name',
    parse.expected('property name', parse.choice(
        value.identifier,
        value.stringLiteral,
        value.numericLiteral)));

/**
 * Parser for the argument list of a object set initializer property.
 */
propertySetParameterList = parse.bind(
    value.identifier,
    \x ->
        parse.always [x]);

/**
 * Parser for the key of a value initialized property .
 */
var propertyValueKey = parse.Parser('Property Value Key',
    parse_lang.then(
        propertyName,
        token.punctuator(':')));

/**
 * Parser for the standard key to value property initializer.
 */
propertyValueInitializer = parse.Parser('Property Value Initializer',
    assignmentExpression);

/**
 * Parser for the value property
 */
var valueProperty = parse.Parser('Value Property',
    ecma_parse.nodea(
        parse.enumeration(
            parse.attempt(propertyValueKey),
            parse.expected('Assignment Expression', propertyValueInitializer)),
        ast_value.ObjectValue.create));

/**
 * Parser for the key of a property getter.
 */
var propertyGetterKey = parse.Parser('Property Getter Key',
    parse.next(
        token.identifier('get'),
        propertyName));

/**
 * Parser for a getter for a property.
 */
propertyGetInitializer = parse.Parser('Property Get Initializer',
    ecma_parse.node(
        parse.next(
            parse.next(
                token.punctuator('('),
                token.punctuator(')')),
            parse_lang.between(token.punctuator('{'), token.punctuator('}'),
                functionBody)),
        \loc, body ->
            new ast_expression.FunctionExpression(loc, null, [], body)));

/**
 * Parser for a property getter.
 */
var getterProperty = parse.Parser('Getter Property',
    ecma_parse.nodea(
        parse.enumeration(
            propertyGetterKey,
            propertyGetInitializer),
        ast_value.ObjectGetter.create));

/**
 * Parser for the key of a property getter.
 */
var propertySetterKey = parse.Parser('Property Setter Key',
    parse.next(
        token.identifier('set'),
        propertyName));

/**
 * Parser for a setter for a property.
 */
propertySetInitializer = parse.Parser('Property Set Initializer',
    ecma_parse.nodea(
        parse.enumeration(
            parse_lang.between(token.punctuator('('), token.punctuator(')'),
                propertySetParameterList),
            parse_lang.between(token.punctuator('{'), token.punctuator('}'),
                functionBody)),
        \loc, params, body ->
            new ast_expression.FunctionExpression(loc, null, params, body)));

/**
 * Parser for a property setter.
 */
var setterProperty = parse.Parser('Setter Property',
    ecma_parse.nodea(
        parse.enumeration(
            propertySetterKey,
            propertySetInitializer),
        ast_value.ObjectSetter.create));

/**
 * Parser for any property initializer.
 */
propertyInitializer = parse.Parser('Property Initializer',
    parse.choice(
        valueProperty,
        getterProperty,
        setterProperty));

/**
 * Parser for the body of an object literal.
 */
propertyList = parse.Parser('Property List',
    parse.eager(parse_lang.sepEndBy(token.punctuator(','),
        propertyInitializer)));

/**
 * Object Literal
 */
objectLiteral = parse.Parser('Object Literal',
    ecma_parse.node(
        parse_lang.between(token.punctuator('{'), token.punctuator('}'),
            propertyList),
        ast_expression.ObjectExpression.create));

// This Expression
////////////////////////////////////////
/**
 * This Expression
 */
thisExpression = parse.Parser('This Expression',
    ecma_parse.node(
        token.keyword('this'),
        ast_expression.ThisExpression.create));

// Primary Expression
////////////////////////////////////////
/**
 * Primary Expression
 */
primaryExpression = parse.memo(parse.Parser('Primary Expression',
    parse.choice(
        functionExpression,
        thisExpression,
        value.identifier,
        value.literal,
        arrayLiteral,
        objectLiteral,
        parse_lang.between(token.punctuator('('), token.punctuator(')'),
            expression))));

// Calling
////////////////////////////////////////
/**
 * Parser for a list of arguments.
 */
argumentList = parse.Parser('Argument List',
    parse.eager(parse_lang.sepBy(token.punctuator(','),
        parse.expected("assignment expression", assignmentExpression))));

/**
 * Parser for a argument list part of a call expression.
 */
args = parse.Parser('Arguments',
    ecma_parse.node(
        parse_lang.between(token.punctuator('('), token.punctuator(')'),
            argumentList),
        \loc, args -> {
            args.loc = loc;
            return args;
        }));

// Accessors
////////////////////////////////////////
/**
 * Parser for a dot accessor in a member expression.
 */
dotAccessor = parse.Parser('Dot Accessor',
    ecma_parse.node(
        parse.next(
            token.punctuator('.'),
            value.identifier),
        \loc, x -> ({
            'loc': loc,
            'property': x,
            'computed': false
        })));

/**
 * Parser for a bracket accessor in a member expression.
 */
bracketAccessor = parse.Parser('Bracket Accessor',
    ecma_parse.node(
        parse_lang.between(token.punctuator('['), token.punctuator(']'),
            parse.expected("expression", expression)),
        \loc x -> ({
            'loc': loc,
            'property': x,
            'computed': true
        })));

/**
 * Parser for an accessor in a member expression.
 */
accessor = parse.Parser('Accessor',
    parse.either(
        dotAccessor,
        bracketAccessor));

// Member Expression
////////////////////////////////////////
/**
 * Parser for a member expression.
 */
memberExpression = let
    reducer = \p, c ->
        ast_expression.MemberExpression.create(
            position.SourceLocation.merge(p.loc, c.loc),
            p,
            c.property,
            c.computed)
in
    parse.memo(parse.Parser('Member Expression',
        parse.binds(
            parse.enumeration(
                parse.either(
                    newExpression,
                    primaryExpression),
                parse.many(accessor)),
            \expression, props ->
                parse.always(stream.foldl(reducer, expression, props)))));


// New Expression
////////////////////////////////////////
/**
 * Parser for a new expression
 */
newExpression = parse.memo(parse.Parser('New Expression',
    ecma_parse.nodea(
        parse.next(
            token.keyword('new'),
            parse.enumeration(
                parse.expected("member expression", memberExpression),
                parse.optional([], args))),
        ast_expression.NewExpression.create)));

// Left Hand Side Expression
////////////////////////////////////////
/**
 * Parser for a left hand side expression.
 */
leftHandSideExpression = let
    reducer = \p, c -> let
        loc = position.SourceLocation.merge(p.loc, c.loc)
    in
        ?c.hasOwnProperty('property')
             :ast_expression.MemberExpression.create(loc, p, c.property, c.computed)
             :ast_expression.CallExpression.create(loc, p, c)
in
    parse.memo(parse.Parser('Left Hand Side Expression',
        parse.binds(
            parse.enumeration(
                memberExpression,
                parse.many(parse.either(
                    args,
                    accessor))),
            \member, accessors ->
                parse.always(stream.foldl(reducer, member, accessors)))));

// Postfix Expression
////////////////////////////////////////
/**
 * Parser for a postfix operator
 */
postfixOperator = parse.Parser('Postfix Operator',
    token.punctuator('++', '--'));

/**
 * Parser for a postfix expression.
 */
postfixExpression = parse.Parser('Postfix Expression',
    ecma_parse.nodea(
        parse.enumeration(
            leftHandSideExpression,
            parse.optional(null, postfixOperator)),
        \loc, argument, op ->
            ?!op
                :argument
                :ast_expression.UpdateExpression.create(
                    position.SourceLocation.merge(argument.loc, op.loc),
                    op.value,
                    argument,
                    false)));

// Unary Expression
////////////////////////////////////////
unaryOperator = parse.Parser('Unary Operator',
    parse.either(
        token.keyword(
            'delete',
            'void',
            'typeof'),
        token.punctuator(
            '++',
            '--',
            '+',
            '-',
            '~',
            '!')));

/**
 * Parser for a unary (prefix) expression.
 */
unaryExpression = let
    reducer = \argument, op -> let
        loc = position.SourceLocation.merge(op.loc, argument.loc)
    in
        ?op.value === '++' || op.value === '--'
            :new ast_expression.UpdateExpression(loc, op.value, argument, true)
            :new ast_expression.UnaryExpression(loc, op.value, argument)
    
in
    parse.Parser('Unary Expression',
        parse.binds(
            parse.enumeration(
                parse.many(unaryOperator),
                parse.expected("postfix expression", postfixExpression)),
            \ops expression ->
                parse.always(stream.foldr(reducer, expression, ops))));

// Binary Expressions
////////////////////////////////////////
var multiplicativeOperator = token.punctuator(
    '*',
    '%',
    '/');

var additiveOperator = token.punctuator(
    '+',
    '-');

var shiftOperator = token.punctuator(
    '<<',
    '>>',
    '>>>');

var relationalOperatorNoIn = parse.either(
    token.punctuator(
        '<',
        '>',
        '<=',
        '>='),
    token.keyword(
        'instanceof'));

var relationalOperator = parse.either(
    relationalOperatorNoIn,
    token.keyword('in'));

var equalityOperator = parse.choice(
    token.punctuator(
        '==',
        '!=',
        '===',
        '!=='));

var bitwiseANDOperator = token.punctuator('&');

var bitwiseXOROperator = token.punctuator('^');

var bitwiseOROperator = token.punctuator('|');

var logicalANDOperator = token.punctuator('&&');

var logicalOROperator = token.punctuator('||');

var basePrecedenceTable = {
    '*': { 'type': 'punctuator', 'precedence': 1, 'node': ast_expression.BinaryExpression },
    '%': { 'type': 'punctuator', 'precedence': 1, 'node': ast_expression.BinaryExpression },
    '/': { 'type': 'punctuator', 'precedence': 1, 'node': ast_expression.BinaryExpression },
    
    '+': { 'type': 'punctuator', 'precedence': 2, 'node': ast_expression.BinaryExpression },
    '-': { 'type': 'punctuator', 'precedence': 2, 'node': ast_expression.BinaryExpression },
    
    '<<': { 'type': 'punctuator', 'precedence': 3, 'node': ast_expression.BinaryExpression },
    '>>': { 'type': 'punctuator', 'precedence': 3, 'node': ast_expression.BinaryExpression },
    '>>>': { 'type': 'punctuator', 'precedence': 3, 'node': ast_expression.BinaryExpression },
    
    '==': { 'type': 'punctuator', 'precedence': 5, 'node': ast_expression.BinaryExpression },
    '!=': { 'type': 'punctuator', 'precedence': 5, 'node': ast_expression.BinaryExpression },
    '===': { 'type': 'punctuator', 'precedence': 5, 'node': ast_expression.BinaryExpression },
    '!==': { 'type': 'punctuator', 'precedence': 5, 'node': ast_expression.BinaryExpression },

    '&': { 'type': 'punctuator', 'precedence': 6, 'node': ast_expression.BinaryExpression },

    '^': { 'type': 'punctuator', 'precedence': 7, 'node': ast_expression.BinaryExpression },

    '|': { 'type': 'punctuator', 'precedence': 8, 'node': ast_expression.BinaryExpression },

    '||': { 'type': 'punctuator', 'precedence': 9, 'node': ast_expression.LogicalExpression },
    
    '&&': { 'type': 'punctuator', 'precedence': 9, 'node': ast_expression.LogicalExpression }
};

var precedenceTable = extend(basePrecedenceTable, {
    '<': { 'type': 'punctuator', 'precedence': 4, 'node': ast_expression.BinaryExpression },
    '>': { 'type': 'punctuator', 'precedence': 4, 'node': ast_expression.BinaryExpression },
    '<=': { 'type': 'punctuator', 'precedence': 4, 'node': ast_expression.BinaryExpression },
    '>=': { 'type': 'punctuator', 'precedence': 4, 'node': ast_expression.BinaryExpression },
    'instanceof': { 'type': 'keyword', 'precedence': 4, 'node': ast_expression.BinaryExpression },
    'in':  { 'type': 'keyword', 'precedence': 4, 'node': ast_expression.BinaryExpression }
});

var precedenceTableNoIn = extend(basePrecedenceTable, {
    '<': { 'type': 'punctuator', 'precedence': 4, 'node': ast_expression.BinaryExpression },
    '>': { 'type': 'punctuator', 'precedence': 4, 'node': ast_expression.BinaryExpression },
    '<=': { 'type': 'punctuator', 'precedence': 4, 'node': ast_expression.BinaryExpression },
    '>=': { 'type': 'punctuator', 'precedence': 4, 'node': ast_expression.BinaryExpression },
    'instanceof': { 'type': 'keyword', 'precedence': 4, 'node': ast_expression.BinaryExpression }
});

binaryExpression = parse.Parser('Binary Expression',
    ecma_parse.precedence(unaryExpression, precedenceTable));

binaryExpressionNoIn = parse.Parser('Binary Expression',
    ecma_parse.precedence(unaryExpression, precedenceTableNoIn));

// Conditional Expression
////////////////////////////////////////
var _baseConditionalExpressionParser = \binExpr assignExpr ->
    parse.either(
        ecma_parse.nodea(
            parse.enumeration(
                parse.attempt(parse_lang.then(
                    parse.memo binExpr,
                    token.punctuator('?'))),
                parse_lang.then(
                    assignExpr,
                    token.punctuator(':')),
                assignExpr),
            ast_expression.ConditionalExpression.create),
        parse.memo binExpr);

/**
 * Parser for a standard conditional expression.
 */
conditionalExpression = parse.Parser('Conditional Expression',
    _baseConditionalExpressionParser(binaryExpression,
        parse.expected("assignment expression", assignmentExpression)));

/**
 * Parser for a conditional expression without the in operator.
 */
conditionalExpressionNoIn = parse.Parser('Conditional Expression No In',
    _baseConditionalExpressionParser(binaryExpressionNoIn,
        parse.expected("assignment expression no in", assignmentExpressionNoIn)));


// Assignment Expression
////////////////////////////////////////
/**
 * Parser for an assignment operator.
 */
assignmentOperator = parse.Parser('Assignment Operator',
    token.punctuator(
        '=',
        '*=',
        '*=',
        '/=',
        '%=',
        '+=',
        '-=',
        '<<=',
        '>>=',
        '>>>=',
        '&=',
        '^=',
        '|='));

var _baseAssignmentExpressionParser = \condExpr ->
    parse.rec\self ->
        parse.either(
            parse.binds(
                parse.attempt(parse.enumeration(
                    leftHandSideExpression,
                    assignmentOperator)),
                \left, operator ->
                    parse.bind(
                        parse.expected("assignment expression", self),
                        \right ->
                            parse.always(ast_expression.AssignmentExpression.create(
                                position.SourceLocation.merge(left.loc, right.loc),
                                operator.value,
                                left,
                                right)))),
            condExpr);

/**
 * Parser for a standard assignment expression.
 */
assignmentExpression = parse.Parser('Assignment Expression',
    _baseAssignmentExpressionParser(conditionalExpression));

/**
 * Parser for an assignment expression without the in operator.
 */
assignmentExpressionNoIn = parse.Parser('Assignment Expression No In', 
    _baseAssignmentExpressionParser(conditionalExpressionNoIn));

// Expression
////////////////////////////////////////
var _baseExpressionParser = \expr ->
    ecma_parse.node(
        parse.eager(parse_lang.sepBy1(token.punctuator(','),
            expr)),
        \loc list ->
            ?list.length > 1
                :new ast_expression.SequenceExpression(loc, list)
                :list.(0));

/**
 * Parser for a standard expression.
 */
expression = parse.Parser('Expression',
    _baseExpressionParser(parse.expected("expression",
        assignmentExpression)));

/**
 * Parser for an expression without the in operator.
 */
expressionNoIn = parse.Parser('Expression No In',
    _baseExpressionParser(parse.expected("expression no in",
        assignmentExpressionNoIn)));

}