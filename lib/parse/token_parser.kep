/**
 * @fileOverview Parsers for working with lex tokens.
 */
package (
    punctuator
    
    keyword
    
    identifier
    anyIdentifier
    
    nullLiteral
    booleanLiteral
    numericLiteral
    stringLiteral
    regularExpressionLiteral)
with
    import 'bennu::parse' {
        ExpectError
        token}
in {

var indexOf = Function.prototype.call.bind(Array.prototype.indexOf);

var join = Function.prototype.call.bind(Array.prototype.join);

var expectError = \msg ->
    \pos, tok ->
        new ExpectError(pos, msg, ?tok : tok.value : "end of input");

var typelabel = \type, msg ->
    token(
        \tok -> (tok.type === type),
        expectError(msg));

var selectAny = \type ->
    \-options(...)->
        token(
            \tok -> (tok.type === type && indexOf(options, tok.value) >= 0),
            expectError(join(options, ', ')));

/* Parsers
 ******************************************************************************/
punctuator = selectAny 'Punctuator';

keyword = selectAny 'Keyword';

anyIdentifier = typelabel('Identifier', 'any identifier');

identifier = selectAny 'Identifier';

nullLiteral = typelabel('Null', 'Null literal');

booleanLiteral = typelabel('Boolean', 'boolean literal');

numericLiteral = typelabel('Number', 'numeric literal');

stringLiteral = typelabel('String', 'string literal');

regularExpressionLiteral = typelabel('RegularExpression', 'regular expression literal');

}