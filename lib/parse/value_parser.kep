/**
 * @fileOverview 
 */
package (
// Literal
    nullLiteral
    booleanLiteral
    numericLiteral
    stringLiteral
    regularExpressionLiteral
    literal

// Identifier
    identifier)
with
    import 'bennu::parse' parse#{
        choice
        label
        map},
    
    import 'ecma-ast::value' ast_value,
    
    import './token_parser' token
in {

var selectLiteral := \kind p ->
    map(
        \x -> new ast_value.Literal(x.loc, kind, x.value),
        p);

// Literal
////////////////////////////////////////
nullLiteral := label@'Null Literal' <|
    selectLiteral('null', token.nullLiteral);

booleanLiteral := label@'Boolean Literal' <|
    selectLiteral('boolean', token.booleanLiteral);

numericLiteral := label@'Numeric Literal' <|
    selectLiteral('number', token.numericLiteral);

stringLiteral := label@'String Literal' <|
    selectLiteral('string', token.stringLiteral);

regularExpressionLiteral := label@'Regular Expression Literal' <|
    selectLiteral('regexp', token.regularExpressionLiteral);

literal := label@'Literal' <|
    choice(
        nullLiteral,
        booleanLiteral,
        numericLiteral,
        stringLiteral,
        regularExpressionLiteral);

// Identifier
////////////////////////////////////////
identifier := label@'Identifier' <|
    map(
        \x -> new ast_value.Identifier(x.loc, x.value),
        token.anyIdentifier);
}