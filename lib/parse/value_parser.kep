/**
 * @fileOverview 
 */
package (
// Literal
    nullLiteral
    booleanLiteral
    numericLiteral
    stringLiteral
    regularExpressionLiteral
    literal

// Identifier
    identifier)
with
    import 'bennu::parse' parse,
    
    import 'ecma-ast::value' ast_value,
    
    import './token_parser' token
in {

var selectLiteral := \kind p ->
    parse.bind(p, \x ->
        parse.always(new ast_value.Literal(x.loc, kind, x.value)));

// Literal
////////////////////////////////////////
nullLiteral := parse.label('Null Literal',
    selectLiteral('null', token.nullLiteral));

booleanLiteral := parse.label('Boolean Literal',
    selectLiteral('boolean', token.booleanLiteral));

numericLiteral := parse.label('Numeric Literal',
    selectLiteral('number', token.numericLiteral));

stringLiteral := parse.label('String Literal',
    selectLiteral('string', token.stringLiteral));

regularExpressionLiteral := parse.label('Regular Expression Literal',
    parse.next(
        parse.bind(parse.getParserState, \state -> state.asRegExp()),
        selectLiteral('regexp', token.regularExpressionLiteral)));

/**
 * label for a simple ECMAScript literal, excluding array and object literals.
 */
literal := parse.label('Literal',
    parse.choice(
        nullLiteral,
        booleanLiteral,
        numericLiteral,
        stringLiteral,
        regularExpressionLiteral));

// Identifier
////////////////////////////////////////
identifier := parse.label('Identifier',
    parse.bind(
        token.anyIdentifier,
        \x ->
            parse.always(new ast_value.Identifier(x.loc, x.value))));

}