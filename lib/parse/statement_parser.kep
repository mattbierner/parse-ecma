/**
 * @fileOverview ECMAScript 5.1 statement parsers.
 */
package (
    blockStatement
    variableStatement
    emptyStatement
    expressionStatement
    ifStatement
    forStatement
    forInStatement
    whileStatement
    doWhileStatement
    iterationStatement
    continueStatement
    breakStatement
    returnStatement
    withStatement
    labeledStatement
    switchStatement
    throwStatement
    tryStatement
    debuggerStatement

// Statement
    statement)
with
    import 'bennu::parse' parse#{
        attempt
        eager
        enumeration
        expected
        late
        label
        look
        next
        not
        optional},
    import 'bennu::lang' {
        between
        sepBy1
        then},
    
    import 'ecma-ast::clause' ast_clause,
    import 'ecma-ast::declaration' ast_declaration,
    import 'ecma-ast::statement' ast_statement,
    import 'ecma-ast::node' {getData},

    import './token_parser' {
        keyword
        punctuator},
    import './common' {node nodea},
    import './expression_parser' _,
    import './value_parser' {identifier}
in {

/* Circular
 ******************************************************************************/
var expression := late \-> {
    with import './expression_parser' {expression} in {
        return expression;
    }
};

var expressionNoIn := late \-> {
    with import './expression_parser' {expressionNoIn} in {
        return expressionNoIn;
    }
};

var assignmentExpression := late \-> {
    with import './expression_parser' {assignmentExpression} in {
        return assignmentExpression;
    }
};

var assignmentExpressionNoIn := late \-> {
    with import './expression_parser' {assignmentExpressionNoIn} in {
        return assignmentExpressionNoIn;
    }
};

var leftHandSideExpression := late \-> {
    with import './expression_parser' {leftHandSideExpression} in {
        return leftHandSideExpression;
    }
};

/* Forward declarations
 ******************************************************************************/
statement = late \-> { return statement; };

/* Helpers
 ******************************************************************************/
// logicalSemiColon
////////////////////////////////////////
/**
 * Checks if a line terminator existed in the original stream.
 */
var lineTerminator := look parse.token(\node -> getData(node, 'lineTerminator'));

/**
 * Consumes 'p' as long as a line terminator did not exist before 'p'.
 */
var noLineTerminator := next @ (not lineTerminator);

/**
 * Matches a logical semicolon in the grammar.
 * 
 * Based on:
 *    'OMeta: an Object-Oriented Language for Pattern Matching',
 *    Alessandro, Warth, Ian Piumarta 2007
 */
var logicalSemiColon := parse.expected('logical semicolon',
    parse.choice(
        punctuator ';',
        look punctuator('}'),
        lineTerminator,
        parse.eof));

/* Statement labels
 ******************************************************************************/
var statementList := eager parse.many(statement);

// Block
////////////////////////////////////////
/**
 * Parser for a block statement
 */
blockStatement := label@'Block Statement' <|
    node(
        between(punctuator '{', punctuator '}', 
            statementList),
        ast_statement.BlockStatement.create);

// Variable Statement
////////////////////////////////////////
var initialiser :=
    next(
        punctuator '=',
        assignmentExpression |> expected@"initialiser expression");

var initialiserNoIn :=
    next(
        punctuator '=',
        assignmentExpressionNoIn |> expected@"initialiser expression");

/**
 * Parser for a single variable declaration.
 */
var variableDeclaration := nodea(
    enumeration(
        identifier,
        optional initialiser),
    ast_declaration.VariableDeclarator.create);

/**
 * Parser for a single variable declaration without the in operator.
 */
var variableDeclarationNoIn := nodea(
    enumeration(
        identifier,
        optional initialiserNoIn),
    ast_declaration.VariableDeclarator.create);

var variableDeclarationList :=
    eager sepBy1(punctuator ',',
        variableDeclaration |> expected@"variable declaration");

var variableDeclarationListNoIn :=
    eager sepBy1(punctuator ',',
        variableDeclarationNoIn |> expected@"variable declaration");

/**
 * Parser for a variable statement which declares one or more variables with
 * optional initializer values.
 */
variableStatement := label@'Variable Statement' <|
    node(
        between(keyword 'var', logicalSemiColon,
            variableDeclarationList |> expected@"variable declaration list"),
        ast_declaration.VariableDeclaration.create);

// Empty Statement
////////////////////////////////////////
emptyStatement := label@'Empty Statement' <|
    node(
        punctuator ';',
        ast_statement.EmptyStatement.create);

// Expression
////////////////////////////////////////
expressionStatement := label@'Expression Statement' <|
    node(
        then(
            expression,
            logicalSemiColon),
        ast_statement.ExpressionStatement.create);

// If
////////////////////////////////////////
ifStatement := label@'If Statement' <| let
    test =
        between(punctuator '(', punctuator ')',
            expression |> expected@"if test"),
    
    consequent = statement |> expected@"if consequent",
    
    alternate =
        next(
            keyword 'else',
            statement |> expected@"if alternate")
in
    nodea(
        next(
            keyword 'if',
            enumeration(
                test,
                consequent,
                optional alternate)),
        ast_statement.IfStatement.create);

// Iteration
////////////////////////////////////////
whileStatement := label@'While Statement' <|
    nodea(
        next(
            keyword 'while',
            enumeration(
                between(punctuator '(', punctuator ')',
                    parse.expected('while test', expression)),
                parse.expected('while body', statement))),
        ast_statement.WhileStatement.create);

doWhileStatement := label@'Do While Statement' <|
    nodea(
        next(
            keyword 'do',
            enumeration(
                parse.expected('do-while body', statement),
                next(
                    keyword 'while',
                    between(punctuator '(', punctuator ')',
                        parse.expected('do-while test', expression))),
                punctuator ';')),
        ast_statement.DoWhileStatement.create);

var forInit := parse.either(
    node(
        next(
            keyword 'var',
            parse.expected("variable declaration list", parse.memo(variableDeclarationListNoIn))),
        ast_declaration.VariableDeclaration.create),
    expressionNoIn);

/**
 * Parser for a for statement with optional init, test, and update expressions.
 */
forStatement := parse.label('For Statement',
    nodea(
        next(
            keyword 'for',
            next(
                punctuator '(',
                enumeration(
                    then(
                        optional forInit,
                        punctuator ';'),
                    then(
                        optional expressionNoIn,
                        punctuator ';'),
                    then(
                        optional expressionNoIn,
                        punctuator ')'),
                    statement))),
        ast_statement.ForStatement.create));

var forInLeft := parse.either(
    node(
        next(
            keyword 'var',
            parse.expected("variable declaration", parse.memo(variableDeclarationNoIn))),
        \loc, x ->
            ast_declaration.VariableDeclaration.create(loc, [x])),
    leftHandSideExpression);

/**
 * Parser for a for in statement.
 */
forInStatement := parse.label('For In Statement',
    nodea(
        next(
            keyword 'for',
            next(
                punctuator '(',
                enumeration(
                    then(
                        forInLeft,
                        keyword 'in'),
                    then(
                        expressionNoIn,
                        punctuator ')'),
                    statement))),
        ast_statement.ForInStatement.create));

/**
 * Parser for any iteration statement.
 */
iterationStatement := parse.label('Iteration Statement',
    parse.choice(
        doWhileStatement,
        whileStatement,
        attempt forInStatement,
        forStatement));

// Continue
////////////////////////////////////////
continueStatement := label@'Continue Statement' <| let
    label = noLineTerminator identifier
in
    node(
        between(keyword 'continue', logicalSemiColon,
            optional label),
        ast_statement.ContinueStatement.create);

// Break
////////////////////////////////////////
breakStatement := label@'Break Statement' <| let
    label = noLineTerminator identifier
in
    node(
        between(keyword 'break', logicalSemiColon,
            optional label),
        ast_statement.BreakStatement.create);

// Return
////////////////////////////////////////
returnStatement := label@'Return Statement' <| let
    argument = noLineTerminator expression
in
    node(
        between(keyword 'return', logicalSemiColon,
            optional argument),
        ast_statement.ReturnStatement.create);

// Throw
////////////////////////////////////////
throwStatement := label@'Throw Statement'<| let
    argument = noLineTerminator(expression) |> expected@"throw argument"
in
    node(
        between(keyword 'throw', logicalSemiColon,
            argument),
        ast_statement.ThrowStatement.create);

// With
////////////////////////////////////////
withStatement := label@'With Statement' <| let
    object =
        between(punctuator '(', punctuator ')',
            expression |> expected@"with object"),
    
    body = statement |> expected@"with body"
in
    nodea(
        next(
            keyword 'with',
            enumeration(
                object,
                body)),
        ast_statement.WithStatement.create);

// Labeled
////////////////////////////////////////
labeledStatement := label@'Labeled Statement' <|
    nodea(
        enumeration(
            then(
                identifier,
                punctuator ':'),
            statement),
        ast_statement.LabeledStatement.create);

// Switch
////////////////////////////////////////
/**
 * Parser for a case clause from a switch statement.
 */
var caseClause := nodea(
    next(
        keyword 'case',
        enumeration(
            then(
                parse.expected("case test", expression),
                punctuator ':'),
            statementList)),
    ast_clause.SwitchCase.create);

/**
 * Parser for the default case of a switch statement.
 */
var defaultClause := node(
    next(
        keyword 'default',
        next(
            punctuator ':',
            statementList)),
    \loc, consequent ->
        ast_clause.SwitchCase.create(loc, null, consequent));

var caseClauses := eager(parse.many(caseClause));

var caseBlock := between(punctuator '{', punctuator '}',
    parse.binds(
        enumeration(
            parse.optional([], caseClauses),
            optional defaultClause,
            parse.optional([], caseClauses)),
        \first, defaultClause, rest ->
            parse.always(?defaultClause
                :first.concat(defaultClause, rest)
                :first.concat(rest))));

/**
 * Parser for a switch statement with zero or more case clauses and zero or one
 * default case clauses in any order.
 */
switchStatement := parse.label('Switch Statement',
    nodea(
        next(
            keyword 'switch',
            enumeration(
                between(punctuator '(', punctuator ')',
                    expression),
                caseBlock)),
        ast_statement.SwitchStatement.create));

// Try
////////////////////////////////////////
/**
 * Parser for a catch block in a try statement.
 */
var catchBlock := nodea(
    next(
        keyword 'catch',
        enumeration(
            between(punctuator '(', punctuator ')',
                identifier),
            blockStatement)),
    ast_clause.CatchClause.create);

/**
 * Parser for a finally block in try statement.
 */
var finallyBlock := next(
    keyword 'finally',
    blockStatement);

/**
 * Parser for a try statement with optional catch and finally blocks.
 */
tryStatement := label@'Try Statement' <|
    nodea(
        next(
            keyword 'try',
            enumeration(
                blockStatement,
                optional catchBlock,
                optional finallyBlock)),
        ast_statement.TryStatement.create);

// Debugger
////////////////////////////////////////
debuggerStatement := label@'Debugger Statement' <|
    node(
        next(
            keyword 'debugger',
            punctuator ';'),
        ast_statement.DebuggerStatement.create);

// statement
////////////////////////////////////////
statement := parse.label('Statement',
    parse.expected("statement", parse.choice(
        blockStatement,
        variableStatement,
        emptyStatement,
        ifStatement,
        iterationStatement,
        continueStatement,
        breakStatement,
        returnStatement,
        withStatement,
        switchStatement,
        throwStatement,
        tryStatement,
        debuggerStatement,
        parse.attempt(labeledStatement),
        expressionStatement)));

}