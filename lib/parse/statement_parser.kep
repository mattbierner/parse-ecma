/**
 * @fileOverview ECMAScript 5.1 statement parsers.
 */
package (
    blockStatement
    variableStatement
    emptyStatement
    expressionStatement
    ifStatement
    forStatement
    forInStatement
    whileStatement
    doWhileStatement
    iterationStatement
    continueStatement
    breakStatement
    returnStatement
    withStatement
    labeledStatement
    switchStatement
    throwStatement
    tryStatement
    debuggerStatement

// Statement
    statement)
with
    import 'bennu::parse' parse#{
        late},
    import 'bennu::lang' parse_lang,
    
    import 'ecma-ast::clause' ast_clause,
    import 'ecma-ast::declaration' ast_declaration,
    import 'ecma-ast::statement' ast_statement,

    import './token_parser' token#{
        punctuator},
    import './common' ecma_parse,
    import './expression_parser' expression,
    import './value_parser' value
in {

    /* Forward declarations
 ******************************************************************************/
statement = late \-> { return statement; };

/* Helpers
 ******************************************************************************/
// logicalSemiColon
////////////////////////////////////////
/**
 * Checks if a line terminator existed in the original stream.
 */
var lineTerminator = parse.look(parse.token(.lineTerminator));

/**
 * Consumes 'p' as long as a line terminator did not exist before 'p'.
 */
var noLineTerminator = parse.next@(parse.not lineTerminator);

/**
 * Matches a logical semicolon in the grammar.
 * 
 * Based on:
 *    'OMeta: an Object-Oriented Language for Pattern Matching',
 *    Alessandro, Warth, Ian Piumarta 2007
 */
var logicalSemiColon = parse.expected('logical semicolon',
    parse.choice(
        punctuator ';',
        parse.look(punctuator '}'),
        lineTerminator,
        parse.eof));

/* Statement labels
 ******************************************************************************/
var statementList = parse.eager(parse.many(statement));

// Block
////////////////////////////////////////
/**
 * label for a block statement
 */
blockStatement = parse.label('Block Statement',
    ecma_parse.node(
        parse_lang.between(punctuator('{'), punctuator('}'), 
            statementList),
        ast_statement.BlockStatement.create));

// Variable Statement
////////////////////////////////////////
var initialiser = parse.next(
    punctuator('='),
    parse.expected("initialiser expression", expression.assignmentExpression));

var initialiserNoIn = parse.next(
    punctuator('='),
    parse.expected("initialiser expression", expression.assignmentExpressionNoIn));

/**
 * label for a single variable declaration.
 */
var variableDeclaration = ecma_parse.nodea(
    parse.enumeration(
        value.identifier,
        parse.optional(initialiser)),
    ast_declaration.VariableDeclarator.create);

/**
 * label for a single variable declaration without the in operator.
 */
var variableDeclarationNoIn = ecma_parse.nodea(
    parse.enumeration(
        value.identifier,
        parse.optional(initialiserNoIn)),
    ast_declaration.VariableDeclarator.create);

var variableDeclarationList = parse.eager(parse_lang.sepBy1(punctuator(','),
    parse.expected('variable declaration', variableDeclaration)));

var variableDeclarationListNoIn = parse.eager(parse_lang.sepBy1(punctuator(','),
    parse.expected('variable declaration', variableDeclarationNoIn)));

/**
 * label for a variable statement which declares one or more variables with
 * optional initializer values.
 */
variableStatement = parse.label('Variable Statement', 
    ecma_parse.node(
        parse_lang.between(token.keyword('var'), logicalSemiColon,
            parse.expected("variable declaration list", variableDeclarationList)),
        ast_declaration.VariableDeclaration.create));

// Empty Statement
////////////////////////////////////////
/**
 * label for an empty statement.
 */
emptyStatement = parse.label('Empty Statement',
    ecma_parse.node(
        punctuator(';'),
        ast_statement.EmptyStatement.create));

// Expression
////////////////////////////////////////
/**
 * label for an expression statement.
 *
 * @TODO: Add lookahead not 'function' check?
 */
expressionStatement = parse.label('Expression Statement',
    ecma_parse.node(
        parse_lang.then(
            expression.expression,
            logicalSemiColon),
        ast_statement.ExpressionStatement.create));

// If
////////////////////////////////////////
/**
 * label for an if statement with optional alternate.
 */
ifStatement = parse.label('If Statement',
    ecma_parse.nodea(
        parse.next(
            token.keyword('if'),
            parse.enumeration(
                parse_lang.between(punctuator('('), punctuator(')'),
                    parse.expected("if test", expression.expression)),
                parse.expected("if consequent", statement),
                parse.optional(parse.next(token.keyword('else'),
                    parse.expected("if alternate", statement))))),
        ast_statement.IfStatement.create));

// Iteration
////////////////////////////////////////
/**
 * label for while statement.
 */
whileStatement = parse.label('While Statement',
    ecma_parse.nodea(
        parse.next(
            token.keyword('while'),
            parse.enumeration(
                parse_lang.between(punctuator('('), punctuator(')'),
                    parse.expected('while test', expression.expression)),
                parse.expected('while body', statement))),
        ast_statement.WhileStatement.create));

/**
 * label for a do while statement.
 */
doWhileStatement = parse.label('Do While Statement',
    ecma_parse.nodea(
        parse.next(
            token.keyword('do'),
            parse.enumeration(
                parse.expected('do-while body', statement),
                parse.next(
                    token.keyword('while'),
                    parse_lang.between(punctuator('('), punctuator(')'),
                        parse.expected('do-while test', expression.expression))),
                punctuator(';'))),
        ast_statement.DoWhileStatement.create));

var forInit = parse.either(
    ecma_parse.node(
        parse.next(
            token.keyword('var'),
            parse.expected("variable declaration list", parse.memo(variableDeclarationListNoIn))),
        ast_declaration.VariableDeclaration.create),
    expression.expressionNoIn);

/**
 * label for a for statement with optional init, test, and update expressions.
 */
forStatement = parse.label('For Statement',
    ecma_parse.nodea(
        parse.next(
            token.keyword('for'),
            parse.next(
                punctuator('('),
                parse.enumeration(
                    parse_lang.then(
                        parse.optional(forInit),
                        punctuator(';')),
                    parse_lang.then(
                        parse.optional(expression.expressionNoIn),
                        punctuator(';')),
                    parse_lang.then(
                        parse.optional(expression.expressionNoIn),
                        punctuator(')')),
                    statement))),
        ast_statement.ForStatement.create));

var forInLeft = parse.either(
    ecma_parse.node(
        parse.next(
            token.keyword('var'),
            parse.expected("variable declaration", parse.memo(variableDeclarationNoIn))),
        \loc, x ->
            ast_declaration.VariableDeclaration.create(loc, [x])),
    expression.leftHandSideExpression);

/**
 * label for a for in statement.
 */
forInStatement = parse.label('For In Statement',
    ecma_parse.nodea(
        parse.next(
            token.keyword('for'),
            parse.next(
                punctuator('('),
                parse.enumeration(
                    parse_lang.then(
                        forInLeft,
                        token.keyword('in')),
                    parse_lang.then(
                        expression.expressionNoIn,
                        punctuator(')')),
                    statement))),
        ast_statement.ForInStatement.create));

/**
 * label for any iteration statement.
 */
iterationStatement = parse.label('Iteration Statement',
    parse.choice(
        doWhileStatement,
        whileStatement,
        parse.attempt(forInStatement),
        forStatement));

// Continue
////////////////////////////////////////
/**
 * label for a continue statement with optional label.
 */
continueStatement = parse.label('Continue Statement',
    ecma_parse.node(
        parse_lang.between(token.keyword('continue'), logicalSemiColon,
            parse.optional(noLineTerminator(value.identifier))),
        ast_statement.ContinueStatement.create));

// Break
////////////////////////////////////////
/**
 * label for a break statement with optional label.
 */
breakStatement = parse.label('Break Statement',
    ecma_parse.node(
        parse_lang.between(token.keyword('break'), logicalSemiColon,
            parse.optional(noLineTerminator(value.identifier))),
        ast_statement.BreakStatement.create));

// Return
////////////////////////////////////////
/**
 * label for a return statement.
 */
returnStatement = parse.label('Return Statement',
    ecma_parse.node(
        parse_lang.between(token.keyword('return'), logicalSemiColon,
            parse.optional(noLineTerminator(expression.expression))),
        ast_statement.ReturnStatement.create));

// Throw
////////////////////////////////////////
/**
 * label for a throw statement.
 */
throwStatement = parse.label('Throw Statement',
    ecma_parse.node(
        parse_lang.between(token.keyword('throw'), logicalSemiColon,
            parse.expected("throw argument", noLineTerminator(expression.expression))),
        ast_statement.ThrowStatement.create));

// With
////////////////////////////////////////
/**
 * label for a with statement.
 */
withStatement = parse.label('With Statement',
    ecma_parse.nodea(
        parse.next(
            token.keyword('with'),
            parse.enumeration(
                parse_lang.between(punctuator('('), punctuator(')'),
                    parse.expected("with object", expression.expression)),
                parse.expected("with body", statement))),
        ast_statement.WithStatement.create));

// Labeled
////////////////////////////////////////
/**
 * label for a labeled statement.
 */
labeledStatement = parse.label('Labeled Statement',
    ecma_parse.nodea(
        parse.enumeration(
            parse_lang.then(
                value.identifier,
                punctuator(':')),
            statement),
        ast_statement.LabeledStatement.create));

// Switch
////////////////////////////////////////
/**
 * label for a case clause from a switch statement.
 */
var caseClause = ecma_parse.nodea(
    parse.next(
        token.keyword('case'),
        parse.enumeration(
            parse_lang.then(
                parse.expected("case test", expression.expression),
                punctuator(':')),
            statementList)),
    ast_clause.SwitchCase.create);

/**
 * label for the default case of a switch statement.
 */
var defaultClause = ecma_parse.node(
    parse.next(
        token.keyword('default'),
        parse.next(
            punctuator(':'),
            statementList)),
    \loc, consequent ->
        ast_clause.SwitchCase.create(loc, null, consequent));

var caseClauses = parse.eager(parse.many(caseClause));

var caseBlock = parse_lang.between(punctuator('{'), punctuator('}'),
    parse.binds(
        parse.enumeration(
            parse.optional([], caseClauses),
            parse.optional(defaultClause),
            parse.optional([], caseClauses)),
        \first, defaultClause, rest ->
            parse.always(?defaultClause
                :first.concat(defaultClause, rest)
                :first.concat(rest))));

/**
 * label for a switch statement with zero or more case clauses and zero or one
 * default case clauses in any order.
 */
switchStatement = parse.label('Switch Statement',
    ecma_parse.nodea(
        parse.next(
            token.keyword('switch'),
            parse.enumeration(
                parse_lang.between(punctuator('('), punctuator(')'),
                    expression.expression),
                caseBlock)),
        ast_statement.SwitchStatement.create));

// Try
////////////////////////////////////////
/**
 * label for a catch block in a try statement.
 */
var catchBlock = ecma_parse.nodea(
    parse.next(
        token.keyword('catch'),
        parse.enumeration(
            parse_lang.between(punctuator('('), punctuator(')'),
                value.identifier),
            parse.expected("block statement", blockStatement))),
    ast_clause.CatchClause.create);

/**
 * label for a finally block in try statement.
 */
var finallyBlock = parse.next(
    token.keyword('finally'),
    parse.expected("block statement", blockStatement));

/**
 * label for a try statement with optional catch and finally blocks.
 */
tryStatement = parse.label('Try Statement',
    ecma_parse.nodea(
        parse.next(
            token.keyword('try'),
            parse.enumeration(
                parse.expected("block statement", blockStatement),
                parse.optional(catchBlock),
                parse.optional(finallyBlock))),
        ast_statement.TryStatement.create));

// Debugger
////////////////////////////////////////
/**
 * label for a debugger statement.
 */
debuggerStatement = parse.label('Debugger Statement',
    ecma_parse.node(
        parse.next(
            token.keyword('debugger'),
            punctuator(';')),
        ast_statement.DebuggerStatement.create));

// statement
////////////////////////////////////////
/**
 * 
 */
statement = parse.label('Statement',
    parse.expected("statement", parse.choice(
        blockStatement,
        variableStatement,
        emptyStatement,
        ifStatement,
        iterationStatement,
        continueStatement,
        breakStatement,
        returnStatement,
        withStatement,
        switchStatement,
        throwStatement,
        tryStatement,
        debuggerStatement,
        parse.attempt(labeledStatement),
        expressionStatement)));

}