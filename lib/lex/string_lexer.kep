/**
 * @fileOverview Lexers for ECMAScript 5.1 string values.
 */
package (
// Constants
    doubleQuote
    escape
    singleQuote
    lineContinuation
    
// Escape Sequences
    singleEscapeCharacter
    escapeCharacter
    nonEscapeCharacter
    characterEscapeSequence
    unicodeEscapeSequence
    hexEscapeSequence
    escapeSequence
    
// Single String Literal
    singleStringCharacter
    singleStringCharacters
    singleStringLiteral
    
// Double String Literal
    doubleStringCharacter
    doubleStringCharacters
    doubleStringLiteral

// Literal
    stringLiteral)
with
    import 'bennu::parse' {
        always
        anyToken
        attempt
        choice
        either
        label
        map
        many
        next
        not
        eof
        sequence},
    import 'bennu::lang' {
        between
        times},
    import 'bennu::text' {
        character
        oneOf
        noneOf},
    
    import 'nu-stream::stream' {foldl},
    
    import './line_terminator_lexer' {
        lineTerminator
        lineTerminatorSequence},
    import './number_lexer' {
        decimalDigit
        hexDigit}
in {

var join := map@(foldl @ (+) @ '');

var fromCharCodeParser := join \> map @ \x -> String.fromCharCode(parseInt(x, 16));

/* Lexers
 ******************************************************************************/
// Constants
// //////////////////////////////////////
doubleQuote := character '"';
escape := character '\\';
singleQuote := character("'");

/**
 * Lexer for string line continuation.
 * 
 * Returns an empty string.
 */
lineContinuation :=
    sequence(
        escape,
        lineTerminatorSequence,
        always '');

// Escape Character
// //////////////////////////////////////
/**
 * Lexer for a single escape character.
 * 
 * Returns the value represented by the escape character.
 */
singleEscapeCharacter := choice(
    character "'",
    character '"',
    character '\\',
    next(character 'b', always('\u0008')),
    next(character 'f', always('\u000C')),
    next(character 'n', always('\u000A')),
    next(character 'r', always('\u000D')),
    next(character 't', always('\u0009')),
    next(character 'v', always('\u000B')));

/**
 * 
 */
escapeCharacter :=
    choice(
        singleEscapeCharacter,
        decimalDigit,
        oneOf 'ux');

/**
 * Lexer for a string character which is not an escape character.
 */
nonEscapeCharacter :=
    sequence(
        not escapeCharacter,
        not lineTerminator,
        anyToken);

// Escape Sequence
// //////////////////////////////////////
/**
 * Lexer for a hex escape sequence.
 * 
 * Returns the character defined by the escape sequence.
 */
hexEscapeSequence :=
    next(
        character 'x',
        hexDigit |> times@2 |> fromCharCodeParser);

/**
 * Lexer for a unicode escape sequence.
 * 
 * Returns the unicode character defined by the escape sequence.
 */
unicodeEscapeSequence :=
    next(
        character 'u',
        hexDigit |> times@4 |> fromCharCodeParser);

/**
 * Lexer for a character escape sequence.
 */
characterEscapeSequence :=
    either(
        singleEscapeCharacter,
        nonEscapeCharacter);

/**
 * Lexer for an escape sequence.
 * 
 * Returns the character defined by the escape sequence.
 */
escapeSequence :=
    choice(
        characterEscapeSequence,
        sequence(
            character '0',
            either(
                eof,
                next(
                    not decimalDigit,
                    anyToken)),
            always '\u0000'),
        hexEscapeSequence,
        unicodeEscapeSequence);

// Single String Literal
// //////////////////////////////////////
/**
 * Lexer for a valid single string character.
 */
singleStringCharacter :=
    choice(
        attempt lineContinuation,
        next(
            escape,
            escapeSequence),
        next(
            not lineTerminator,
            noneOf "\\'"));

/**
 * Lexer for a sequence of single string characters.
 */
singleStringCharacters := many singleStringCharacter;

/**
 * Lexer for a single quoted string literal.
 * 
 * Returns the value of the string enclosed in the single quoted string literal.
 */
singleStringLiteral := label@'Single String Literal' <|
    between(singleQuote, singleQuote,
        join singleStringCharacters);

// Double String Literal
// //////////////////////////////////////
/**
 * Lexer for a valid double string character
 */
doubleStringCharacter :=
    choice(
        attempt lineContinuation,
        next(
            escape,
            escapeSequence),
        next(
            not lineTerminator,
            noneOf '"\\'));

/**
 * Lexer for a sequence of double string characters.
 */
doubleStringCharacters := many doubleStringCharacter;

/**
 * Lexer for a double quoted string literal.
 * 
 * Returns the value of the string enclosed in the double quoted string literal.
 */
doubleStringLiteral := label@'Double String Literal' <|
    between(doubleQuote, doubleQuote,
        join doubleStringCharacters);

// String Literal
// //////////////////////////////////////
/**
 * Lexer for a string literal.
 * 
 * Returns the value of the string enclosed in the string literal.
 */
stringLiteral := label@'Sting Literal Lexer' <|
    either(
        singleStringLiteral,
        doubleStringLiteral);

}