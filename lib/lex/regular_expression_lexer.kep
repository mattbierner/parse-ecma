/**
 * @fileOverview Lexers for ECMAScript 5.1 regular expression literals.
 */
package (
    regularExpressionNonTerminator
    regularExpressionBackslashSequence
    
// Class
    regularExpressionClassChar
    regularExpressionClassChars
    regularExpressionClass
    
// Characters
    regularExpressionChar
    regularExpressionChars
    regularExpressionFirstChar
    
// Parts
    regularExpressionFlags
    regularExpressionBody
    
// Regex Literal
    regularExpressionLiteral)
with
    import 'bennu::parse' {
        always
        anyToken
        attempt
        binds
        choice
        cons
        either
        enumeration
        label
        many
        map
        not
        next},
    import 'bennu::lang' {between},
    import 'bennu::text' {
        character
        oneOf
        noneOf},
    
    import 'nu-stream::stream' {foldl},
    
    import './identifier_lexer' {identifierPart},
    import './line_terminator_lexer' {lineTerminator}
in {

var join := map @ (foldl @ (+) @ '');

/* Lexers
 ******************************************************************************/
// Parts
////////////////////////////////////////
/**
 * non terminator character in a regular expression.
 */
regularExpressionNonTerminator :=
    next(
        not lineTerminator,
        anyToken);

/**
 * regular expression backslash sequence.
 */
regularExpressionBackslashSequence :=
    next(
        character '\\',
        regularExpressionNonTerminator.map (+, '\\'));

// Class
////////////////////////////////////////
regularExpressionClassChar :=
    either(
        attempt next(
            not lineTerminator,
            noneOf ']\\'),
        regularExpressionBackslashSequence);

regularExpressionClassChars := many regularExpressionClassChar;

regularExpressionClass :=
    between(character '[', character ']', 
        join regularExpressionClassChars)
    .map\body ->
        '[' + body + ']';

// Characters
////////////////////////////////////////
/**
 * first character of a regular expression.
 */
regularExpressionFirstChar :=
    choice(
        next(
            not lineTerminator,
            noneOf "*\\/["),
        regularExpressionBackslashSequence,
        regularExpressionClass);

/**
 * a character in a regular expression.
 */
regularExpressionChar :=
    choice(
        next(
            not lineTerminator,
            noneOf '\\/['),
        regularExpressionBackslashSequence,
        regularExpressionClass);

/**
 * String of regular expression chars.
 */
regularExpressionChars := many regularExpressionChar;

// Literal Parts
////////////////////////////////////////
/**
 * Regular expression flags.
 */
regularExpressionFlags := many identifierPart;

/**
 * Body of a gular expression
 */
regularExpressionBody :=
    join cons(
        regularExpressionFirstChar,
        regularExpressionChars);

// Literal
////////////////////////////////////////
/**
 * Regular expression literal.
 */
regularExpressionLiteral := label@'Regular Expression Lexer' <|
    binds(
        enumeration(
            between(character '/', character '/',
                regularExpressionBody),
            join regularExpressionFlags),
        \body flags ->
            always{ body: body, flags: flags });

}