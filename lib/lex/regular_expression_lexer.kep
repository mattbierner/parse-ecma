/**
 * @fileOverview Lexers for ECMAScript 5.1 regular expression literals.
 */
package (
    regularExpressionNonTerminator
    regularExpressionBackslashSequence
    
// Class
    regularExpressionClassChar
    regularExpressionClassChars
    regularExpressionClass
    
// Characters
    regularExpressionChar
    regularExpressionChars
    regularExpressionFirstChar
    
// Parts
    regularExpressionFlags
    regularExpressionBody
    
// Regex Literal
    regularExpressionLiteral)
with
    import 'bennu::parse' parse,
    import 'bennu::lang' parse_lang,
    import 'bennu::text' parse_text,
    
    import 'nu-stream::stream' stream,
    
    import './identifier_lexer' identifier_lexer,
    import './line_terminator_lexer' line_terminator_lexer
in {

var join = (+);

/* Lexers
 ******************************************************************************/
// Parts
////////////////////////////////////////
/**
 * Lexer for non terminator character in a regular expression.
 */
regularExpressionNonTerminator = parse.token(\tok -> {
    return !parse.test(line_terminator_lexer.lineTerminator, tok);
});

/**
 * Lexer for regular expression backslash sequence.
 */
regularExpressionBackslashSequence =
    parse.next(
        parse_text.character('\\'),
        parse.bind(regularExpressionNonTerminator, \char ->
            parse.always('\\' + char)));

// Class
////////////////////////////////////////
regularExpressionClassChar = parse.either(
    parse.attempt(parse.token(\tok ->{
        return !parse.test(line_terminator_lexer.lineTerminator, tok) &&
            tok !== ']' && tok !== '\\'; 
    })),
    regularExpressionBackslashSequence);

regularExpressionClassChars = parse.many(regularExpressionClassChar);

regularExpressionClass = parse_lang.between(parse_text.character('['), parse_text.character(']'), 
    parse.bind(regularExpressionClassChars, \body ->
        parse.always('[' + stream.foldl(join, '', body) + ']')));

// Characters
////////////////////////////////////////
/**
 * Lexer for first character of a regular expression.
 */
regularExpressionFirstChar = parse.choice(
    parse.token(\tok -> {
        return !parse.test(line_terminator_lexer.lineTerminator, tok) &&
            tok !== '*' && tok !== '\\' && tok !== '/' && tok !== '['; 
    }),
    regularExpressionBackslashSequence,
    regularExpressionClass);

/**
 * Lexer for a character in a regular expression.
 */
regularExpressionChar =  parse.choice(
    parse.token(\tok -> {
        return !parse.test(line_terminator_lexer.lineTerminator, tok) &&
            tok !== '\\' && tok !== '/' && tok !== '['; 
    }),
    regularExpressionBackslashSequence,
    regularExpressionClass);

/**
 * Lexer for string of regular expression chars.
 */
regularExpressionChars = parse.many(regularExpressionChar);

// Literal Parts
////////////////////////////////////////
/**
 * Lexer for regular expression flags.
 */
regularExpressionFlags = parse.many(identifier_lexer.identifierPart);

/**
 * Lexer for the body of a gular expression
 */
regularExpressionBody = parse.bind(
    parse.cons(regularExpressionFirstChar, regularExpressionChars),
    \s ->
        parse.always(stream.foldl(join, '', s)));

// Literal
////////////////////////////////////////
/**
 * Lexer for regular expression literals.
 */
regularExpressionLiteral = parse.label('Regular Expression Lexer',
    parse.binds(
        parse.enumeration(
            parse_lang.between(parse_text.character('/'), parse_text.character('/'),
                regularExpressionBody),
            regularExpressionFlags),
        \body, flags ->
            parse.always({
                'body': body,
                'flags': stream.foldl(join, '', flags)
            })));

}