/**
 * @fileOverview ECMAScript identifier lexers.
 */
package (
    zwnj
    zwj
    unicodeLetter
    unicodeDigit
    unicodeConnectorPunctuation
    unicodeCombiningMark
    
// Parts
    identifierStart
    identifierPart
    identifierParts
    identifierName
    
// Identifier
    identifier)
with
    import 'bennu::parse' parse,
    import 'bennu::text' parse_text#{oneOf},
    
    import 'nu-stream::stream' {foldl},
    
    import './reserved_word_lexer' reserved_word_lexer,
    import './string_lexer' string_lexer
in {

var join = (+);

/* Lexers
 ******************************************************************************/
// Characters
////////////////////////////////////////
/**
 * Zero Width non-joiner Lexer
 */
zwnj = parse_text.character('\u200c');

/**
 * Zero Width joiner Lexer
 */
zwj = parse_text.character('\u200d');

/**
 * Lexer for a unicode letter character.
 * 
 * Any character in any of the Unicode categories:
 * - Uppercase letter (Lu)
 * - Lowercase letter (Ll)
 * - Titlecase letter (Lt)
 * - Modifier letter (Lm)
 * - Other letter (Lo)
 * - Letter number (Nl)
 * 
 * @TODO Implement for unicode based on spec.
 */
unicodeLetter = parse_text.letter; 

/**
 * Lexer for a Unicode digit character.
 * 
 * Any character in the Unicode category Decimal number (Nd).
 * 
 * @TODO Implement for unicode based on spec.
 */
unicodeDigit = parse_text.digit;

/**
 * Lexer for a Unicode connector punctuation character.
 * 
 * Any character in the Unicode category Connector Punctuation (Pc).
 */
unicodeConnectorPunctuation = oneOf [
    '\u005F',
    '\u203F',
    '\u2040',
    '\u2054',
    '\uFE33',
    '\uFE34',
    '\uFE4D',
    '\uFE4E',
    '\uFE4F',
    '\uFF3F'];

/**
 * Lexer for any combining mark Unicode character.
 * 
 * Any character in any of the Unicode categories:
 * - Non-spacing mark (Mn)
 * - Combining spacing mark (Mc)
 * 
 * @TODO Implement for unicode based on spec
 */
unicodeCombiningMark = parse.never();

// Parts
////////////////////////////////////////
/**
 * Lexer for the start of an identifier.
 */
identifierStart = parse.choice(
    unicodeLetter,
    parse_text.character('$'),
    parse_text.character('_'),
    parse.next(string_lexer.escape,
        string_lexer.unicodeEscapeSequence));

/**
 * Lexer for the rest of an identifier after the first character.
 */
identifierPart = parse.choice(
    parse.attempt(identifierStart),
    unicodeCombiningMark,
    unicodeDigit,
    unicodeConnectorPunctuation,
    zwnj,
    zwj);

identifierParts = parse.many(identifierPart);

/**
 * Lexer for any identifier name.
 * 
 * May be a keyword.
 */
identifierName = parse.cons(identifierStart, identifierParts);

// Identifier
////////////////////////////////////////
var reservedWordTest = parse.next(
    reserved_word_lexer.reservedWord,
    parse.eof);

/**
 * Lexer for an identifier.
 * 
 * Checks to make sure returned identifier is not a keyword.
 */
identifier = parse.label('Identifier Lexer',
    parse.bind(identifierName, \name -> {
        var v = foldl(join, '', name);
        return ?reserved_word_lexer.keywordList.indexOf(v) >= 0
            :parse.fail("Reserved words cannot be used as identifiers")
            :parse.always(v);
    }));


}