/**
 * @fileOverview ECMAScript comment lexers.
 */
package (
    singleLineCommentMarker
    singleLineCommentChar
    singleLineCommentChars
    singleLineComment
    
    multiLineCommentStartMarker
    multiLineCommentEndMarker
    multiLineCommentChars
    multiLineComment
    
    comment)
with
    import 'bennu::parse' {
        anyToken
        either
        label
        map
        many
        next
        not},
    import 'bennu::lang' {between},
    import 'bennu::text' {
        character
        string},
    
    import 'nu-stream::stream' {foldl NIL},
    
    import './line_terminator_lexer' {lineTerminator}
in {

var join := map @ (foldl @ (+) @ '');

/* Lexers
 ******************************************************************************/
// Single Line Comment
////////////////////////////////////////
singleLineCommentMarker := string '//';

singleLineCommentChar :=
    next(
        not lineTerminator,
        anyToken);

singleLineCommentChars := many singleLineCommentChar;

/**
 * Single line comment.
 * 
 * Returns the contents of the comment.
 */
singleLineComment := label@'Single Line Comment Lexer' <|
    next(
        singleLineCommentMarker,
        join singleLineCommentChars);

// Multi Line Comment
////////////////////////////////////////
multiLineCommentStartMarker := string '/*';

multiLineCommentEndMarker := string '*/' ;

multiLineCommentChars :=
    many next(
        not multiLineCommentEndMarker,
        anyToken);

/**
 * Multi line comment.
 * 
 * Returns the contents of the comment.
 */
multiLineComment := label@'Multi Line Comment Lexer' <|
    between(multiLineCommentStartMarker, multiLineCommentEndMarker,
        join multiLineCommentChars);

// Comment
////////////////////////////////////////
/**
 * Lexer for any ECMAScript 5.1 comment
 */
comment := label@'Comment Lexer'<|
    either(
        singleLineComment,
        multiLineComment);

}