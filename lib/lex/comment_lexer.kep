/**
 * @fileOverview ECMAScript comment lexers.
 */
package (
    singleLineCommentMarker
    singleLineCommentChar
    singleLineCommentChars
    singleLineComment
    
    multiLineCommentStartMarker
    multiLineCommentEndMarker
    multiLineCommentChars
    multiLineComment
    
    comment)
with
    import 'bennu::parse' parse#{
        always},
    import 'bennu::text' {
        character
        string},
    
    import 'nu-stream::stream' {foldl NIL},
    import './line_terminator_lexer' line_terminator
in {

var join = \p ->
    parse.bind(p, \s ->
        always foldl((+), '', s));

/* Lexers
 ******************************************************************************/
// Single Line Comment
////////////////////////////////////////
/**
 * Lexer for token that marks the start of a single line comment.
 */
singleLineCommentMarker = string('//');

/**
 * Lexer for a valid character in a single line comment.
 */
singleLineCommentChar = parse.token(\tok ->
    !parse.test(line_terminator.lineTerminator, tok));

/**
 * Lexer for the characters in a single line comment.
 */
singleLineCommentChars = parse.many(singleLineCommentChar);

/**
 * Lexer for a single line comment
 * 
 * Returns the contents of the comment.
 */
singleLineComment = parse.Parser('Single Line Comment Lexer',
    parse.next(
        singleLineCommentMarker,
        join(singleLineCommentChars)));

// Multi Line Comment
////////////////////////////////////////
/**
 * Lexer for token that marks the start of a multi line comment.
 */
multiLineCommentStartMarker = string('/*');

/**
 * Lexer for token that marks the end of a multi line comment.
 */
multiLineCommentEndMarker = string('*/');

/**
 * Lexer for string of characters inside of multi line comment.
 */
multiLineCommentChars = parse.RecParser('Multi Line Comment Characters Lexer', \self ->
    parse.either(
        parse.next(
            character('*'),
            parse.either(
                parse.next(character('/'), always NIL),
                parse.cons(parse.always('*'), self))),
        parse.cons(parse.anyToken, self)));

/**
 * Lexer for a multi line comment.
 * 
 * Returns the contents of the comment.
 */
multiLineComment = parse.Parser('Multi Line Comment Lexer',
    parse.next(
        multiLineCommentStartMarker,
        join(multiLineCommentChars)));

// Comment
////////////////////////////////////////
/**
 * Lexer for any ECMAScript 5.1 comment
 */
comment = parse.Parser('Comment Lexer',
    parse.either(
        singleLineComment,
        multiLineComment));

}