/**
 * @fileOverview ECMAScript number lexers.
 */
package (
// Constants
    decimal
    negativeSign
    positiveSign
    exponentIndicator
    hexIndicator

// Digits
    decimalDigit
    nonZeroDigit
    hexDigit
    decimalDigits
    hexDigits
    hexIntegerLiteralDigits

// Integer
    unsignedInteger
    signedInteger

// Part
    exponentPart

// Literals
    hexIntegerLiteral
    decimalIntegerLiteral
    decimalLiteral

    numericLiteral)
with
    import 'bennu::parse' parse#{
        either
        expected
        label
        map
        many1
        next
        optional},
    import 'bennu::text' {
        character
        string
        oneOf},
    
    import 'nu-stream::stream' {foldl}
in {

var join := map @ (foldl@ (+) @ '');

/* Lexers
 ******************************************************************************/
// Constants
////////////////////////////////////////
decimal := character '.';

negativeSign := character '-';

positiveSign := character '+';

exponentIndicator := oneOf 'eE';

hexIndicator :=
    either(
        string '0x',
        string '0X');

// Digits
////////////////////////////////////////
/**
 * Lexer that matches any decimal number digit.
 */
decimalDigit := oneOf '0123456789';

/**
 * Lexer that matches any non zero decimal number digit.
 */
nonZeroDigit := oneOf '123456789';

/**
 * Lexer that matches any hex number digit.
 */
hexDigit := oneOf '0123456789abcdefABCDEF';

/**
 * Lexer that matches a string of one or more decimal digits.
 */
decimalDigits := join <| many1 decimalDigit;

/**
 * Lexer that matches a string of one or more hex digits.
 */
hexDigits := join <| many1 hexDigit;

// Integer
////////////////////////////////////////
/**
 * Lexer that matches an unsigned integer.
 * 
 * Returns the numeric value of the integer.
 */
unsignedInteger := label@'Unsigned Integer Lexer' <|
    map(parseInt, decimalDigits);

/**
 * Lexer that matches a signed integer.
 * 
 * Returns the numeric value of the integer.
 */
signedInteger := label@'Signed Integer Lexer' <|
    either(
        next(
            negativeSign,
            map((--), unsignedInteger)),
        next(
            optional positiveSign,
            unsignedInteger));

// Part
////////////////////////////////////////
/**
 * Lexer that matches the exponent part of a number.
 * 
 * Returns the numeric value of the exponent part.
 */
exponentPart := label@'Exponent Part Lexer' <|
    next(
        exponentIndicator,
        signedInteger |> expected@'exponent');

/**
 * Digits of a hex number literal.
 */
hexIntegerLiteralDigits := parse.label('Hex Integer Literal Digits Lexer',
    parse.bind(hexDigits, \num ->
        parse.always(parseInt(num, 16))));

// Literals
////////////////////////////////////////
/**
 * Hex number literal.
 */
hexIntegerLiteral := label@ 'Hex Integer Literal Lexer' <|
    next(
        hexIndicator,
        hexIntegerLiteralDigits |> expected@'hex digits');

/**
 * Integer number literal.
 * 
 * Returns the number value of the input.
 */
decimalIntegerLiteral := label@'Decimal Integer Literal' <|
    map(parseInt, decimalDigits);

/**
 * A decimal number literal.
 * 
 * Either a integer or a decimal number. Before or after the decimal must contain
 * at least one number. May contain an exponent value at the end.
 * 
 * @return Number value of the input.
 */
decimalLiteral := parse.label('Decimal Literal Lexer', let
    fractional = parse.bind(decimalDigits, \frac ->
        parse.always(parseFloat('.' + frac)))
    
in
    parse.binds(
        parse.enumeration(
            parse.attempt(parse.either(
                parse.next(
                    decimal,
                    parse.expected('decimal digits', fractional)),
                parse.binds(
                    parse.enumeration(
                        decimalIntegerLiteral,
                        parse.optional(0,
                            parse.next(
                                decimal,
                                parse.optional(0, fractional)))),
                    \whole, fractional ->
                        parse.always(whole + fractional)))),
            parse.optional(0, exponentPart)),
        \num exp ->
            parse.always(num * Math.pow(10, parseInt(exp)))));



/**
 * Literal for any numeric value
 * 
 * @return Number value of the input.
 */
numericLiteral := label@'Numeric Literal Lexer' <|
    either(
        next(
            hexIndicator,
            hexIntegerLiteralDigits |> expected@'hex digits'),
        decimalLiteral);

}