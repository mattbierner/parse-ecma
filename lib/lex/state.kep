package State
with
    import 'bennu::parse' {ParserState Parser},
    
    import 'nu-stream::stream' {
        isEmpty
        rest}
in {

State = function \input pos prevTok =self-> {
    ParserState.call(self, input, pos);
    self.prevTok = prevTok;
};
State.prototype = new ParserState();

State.prototype.next = \tok s =self-> {
    if (!self._next) {
        var s = new State(rest self.input, self.position.increment(tok, s), self.prevTok);
        self._next = new Parser\_ m cok -> cok(tok, s, m);
    }
    return self._next;
};

State.prototype.consume = \tok =self-> {
    switch (tok.type) {
    case 'Comment':
    case 'Whitespace':
    case 'LineTerminator':
        return self;
    default:
        return new State(self.input, self.position, tok);
    }
};


}